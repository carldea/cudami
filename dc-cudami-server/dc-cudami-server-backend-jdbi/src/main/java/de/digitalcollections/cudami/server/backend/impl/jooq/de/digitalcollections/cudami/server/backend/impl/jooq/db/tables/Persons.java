/*
 * This file is generated by jOOQ.
 */
package de.digitalcollections.cudami.server.backend.impl.jooq.db.tables;

import de.digitalcollections.cudami.server.backend.impl.jooq.db.Keys;
import de.digitalcollections.cudami.server.backend.impl.jooq.db.Public;
import de.digitalcollections.cudami.server.backend.impl.jooq.db.tables.records.PersonsRecord;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.UUID;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row18;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Persons extends TableImpl<PersonsRecord> {

  private static final long serialVersionUID = -1141758965;

  /** The reference instance of <code>public.persons</code> */
  public static final Persons PERSONS = new Persons();

  /** The class holding records for this type */
  @Override
  public Class<PersonsRecord> getRecordType() {
    return PersonsRecord.class;
  }

  /** The column <code>public.persons.uuid</code>. */
  public final TableField<PersonsRecord, UUID> UUID =
      createField(DSL.name("uuid"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

  /** The column <code>public.persons.created</code>. */
  public final TableField<PersonsRecord, LocalDateTime> CREATED =
      createField(
          DSL.name("created"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

  /** The column <code>public.persons.description</code>. */
  public final TableField<PersonsRecord, JSONB> DESCRIPTION =
      createField(DSL.name("description"), org.jooq.impl.SQLDataType.JSONB, this, "");

  /** The column <code>public.persons.identifiable_type</code>. */
  public final TableField<PersonsRecord, String> IDENTIFIABLE_TYPE =
      createField(
          DSL.name("identifiable_type"),
          org.jooq.impl.SQLDataType.VARCHAR.nullable(false),
          this,
          "");

  /** The column <code>public.persons.label</code>. */
  public final TableField<PersonsRecord, JSONB> LABEL =
      createField(DSL.name("label"), org.jooq.impl.SQLDataType.JSONB.nullable(false), this, "");

  /** The column <code>public.persons.last_modified</code>. */
  public final TableField<PersonsRecord, LocalDateTime> LAST_MODIFIED =
      createField(
          DSL.name("last_modified"),
          org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false),
          this,
          "");

  /** The column <code>public.persons.entity_type</code>. */
  public final TableField<PersonsRecord, String> ENTITY_TYPE =
      createField(
          DSL.name("entity_type"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

  /** The column <code>public.persons.refid</code>. */
  public final TableField<PersonsRecord, Integer> REFID =
      createField(
          DSL.name("refid"),
          org.jooq.impl.SQLDataType.INTEGER
              .nullable(false)
              .defaultValue(
                  org.jooq.impl.DSL.field(
                      "nextval('entities_refid_seq'::regclass)",
                      org.jooq.impl.SQLDataType.INTEGER)),
          this,
          "");

  /** The column <code>public.persons.previewfileresource</code>. */
  public final TableField<PersonsRecord, UUID> PREVIEWFILERESOURCE =
      createField(DSL.name("previewfileresource"), org.jooq.impl.SQLDataType.UUID, this, "");

  /** The column <code>public.persons.preview_hints</code>. */
  public final TableField<PersonsRecord, JSONB> PREVIEW_HINTS =
      createField(DSL.name("preview_hints"), org.jooq.impl.SQLDataType.JSONB, this, "");

  /** The column <code>public.persons.dateofbirth</code>. */
  public final TableField<PersonsRecord, LocalDate> DATEOFBIRTH =
      createField(DSL.name("dateofbirth"), org.jooq.impl.SQLDataType.LOCALDATE, this, "");

  /** The column <code>public.persons.timevalueofbirth</code>. */
  public final TableField<PersonsRecord, JSONB> TIMEVALUEOFBIRTH =
      createField(DSL.name("timevalueofbirth"), org.jooq.impl.SQLDataType.JSONB, this, "");

  /** The column <code>public.persons.dateofdeath</code>. */
  public final TableField<PersonsRecord, LocalDate> DATEOFDEATH =
      createField(DSL.name("dateofdeath"), org.jooq.impl.SQLDataType.LOCALDATE, this, "");

  /** The column <code>public.persons.timevalueofdeath</code>. */
  public final TableField<PersonsRecord, JSONB> TIMEVALUEOFDEATH =
      createField(DSL.name("timevalueofdeath"), org.jooq.impl.SQLDataType.JSONB, this, "");

  /** The column <code>public.persons.gender</code>. */
  public final TableField<PersonsRecord, String> GENDER =
      createField(DSL.name("gender"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

  /** The column <code>public.persons.custom_attrs</code>. */
  public final TableField<PersonsRecord, JSONB> CUSTOM_ATTRS =
      createField(DSL.name("custom_attrs"), org.jooq.impl.SQLDataType.JSONB, this, "");

  /** The column <code>public.persons.locationofbirth</code>. */
  public final TableField<PersonsRecord, UUID> LOCATIONOFBIRTH =
      createField(DSL.name("locationofbirth"), org.jooq.impl.SQLDataType.UUID, this, "");

  /** The column <code>public.persons.locationofdeath</code>. */
  public final TableField<PersonsRecord, UUID> LOCATIONOFDEATH =
      createField(DSL.name("locationofdeath"), org.jooq.impl.SQLDataType.UUID, this, "");

  /** Create a <code>public.persons</code> table reference */
  public Persons() {
    this(DSL.name("persons"), null);
  }

  /** Create an aliased <code>public.persons</code> table reference */
  public Persons(String alias) {
    this(DSL.name(alias), PERSONS);
  }

  /** Create an aliased <code>public.persons</code> table reference */
  public Persons(Name alias) {
    this(alias, PERSONS);
  }

  private Persons(Name alias, Table<PersonsRecord> aliased) {
    this(alias, aliased, null);
  }

  private Persons(Name alias, Table<PersonsRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  public <O extends Record> Persons(Table<O> child, ForeignKey<O, PersonsRecord> key) {
    super(child, key, PERSONS);
  }

  @Override
  public Schema getSchema() {
    return Public.PUBLIC;
  }

  @Override
  public Identity<PersonsRecord, Integer> getIdentity() {
    return Keys.IDENTITY_PERSONS;
  }

  @Override
  public Persons as(String alias) {
    return new Persons(DSL.name(alias), this);
  }

  @Override
  public Persons as(Name alias) {
    return new Persons(alias, this);
  }

  /** Rename this table */
  @Override
  public Persons rename(String name) {
    return new Persons(DSL.name(name), null);
  }

  /** Rename this table */
  @Override
  public Persons rename(Name name) {
    return new Persons(name, null);
  }

  // -------------------------------------------------------------------------
  // Row18 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row18<
          UUID,
          LocalDateTime,
          JSONB,
          String,
          JSONB,
          LocalDateTime,
          String,
          Integer,
          UUID,
          JSONB,
          LocalDate,
          JSONB,
          LocalDate,
          JSONB,
          String,
          JSONB,
          UUID,
          UUID>
      fieldsRow() {
    return (Row18) super.fieldsRow();
  }
}
