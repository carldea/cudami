/*
 * This file is generated by jOOQ.
 */
package de.digitalcollections.cudami.server.backend.impl.jooq.db.tables;

import de.digitalcollections.cudami.server.backend.impl.jooq.db.Keys;
import de.digitalcollections.cudami.server.backend.impl.jooq.db.Public;
import de.digitalcollections.cudami.server.backend.impl.jooq.db.tables.records.SubtopicsRecord;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Subtopics extends TableImpl<SubtopicsRecord> {

  private static final long serialVersionUID = -1714318405;

  /** The reference instance of <code>public.subtopics</code> */
  public static final Subtopics SUBTOPICS = new Subtopics();

  /** The class holding records for this type */
  @Override
  public Class<SubtopicsRecord> getRecordType() {
    return SubtopicsRecord.class;
  }

  /** The column <code>public.subtopics.uuid</code>. */
  public final TableField<SubtopicsRecord, UUID> UUID =
      createField(DSL.name("uuid"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

  /** The column <code>public.subtopics.created</code>. */
  public final TableField<SubtopicsRecord, LocalDateTime> CREATED =
      createField(
          DSL.name("created"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

  /** The column <code>public.subtopics.description</code>. */
  public final TableField<SubtopicsRecord, JSONB> DESCRIPTION =
      createField(DSL.name("description"), org.jooq.impl.SQLDataType.JSONB, this, "");

  /** The column <code>public.subtopics.identifiable_type</code>. */
  public final TableField<SubtopicsRecord, String> IDENTIFIABLE_TYPE =
      createField(
          DSL.name("identifiable_type"),
          org.jooq.impl.SQLDataType.VARCHAR.nullable(false),
          this,
          "");

  /** The column <code>public.subtopics.label</code>. */
  public final TableField<SubtopicsRecord, JSONB> LABEL =
      createField(DSL.name("label"), org.jooq.impl.SQLDataType.JSONB.nullable(false), this, "");

  /** The column <code>public.subtopics.last_modified</code>. */
  public final TableField<SubtopicsRecord, LocalDateTime> LAST_MODIFIED =
      createField(
          DSL.name("last_modified"),
          org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false),
          this,
          "");

  /** The column <code>public.subtopics.previewfileresource</code>. */
  public final TableField<SubtopicsRecord, UUID> PREVIEWFILERESOURCE =
      createField(DSL.name("previewfileresource"), org.jooq.impl.SQLDataType.UUID, this, "");

  /** The column <code>public.subtopics.preview_hints</code>. */
  public final TableField<SubtopicsRecord, JSONB> PREVIEW_HINTS =
      createField(DSL.name("preview_hints"), org.jooq.impl.SQLDataType.JSONB, this, "");

  /** Create a <code>public.subtopics</code> table reference */
  public Subtopics() {
    this(DSL.name("subtopics"), null);
  }

  /** Create an aliased <code>public.subtopics</code> table reference */
  public Subtopics(String alias) {
    this(DSL.name(alias), SUBTOPICS);
  }

  /** Create an aliased <code>public.subtopics</code> table reference */
  public Subtopics(Name alias) {
    this(alias, SUBTOPICS);
  }

  private Subtopics(Name alias, Table<SubtopicsRecord> aliased) {
    this(alias, aliased, null);
  }

  private Subtopics(Name alias, Table<SubtopicsRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  public <O extends Record> Subtopics(Table<O> child, ForeignKey<O, SubtopicsRecord> key) {
    super(child, key, SUBTOPICS);
  }

  @Override
  public Schema getSchema() {
    return Public.PUBLIC;
  }

  @Override
  public UniqueKey<SubtopicsRecord> getPrimaryKey() {
    return Keys.SUBTOPICS_PKEY;
  }

  @Override
  public List<UniqueKey<SubtopicsRecord>> getKeys() {
    return Arrays.<UniqueKey<SubtopicsRecord>>asList(Keys.SUBTOPICS_PKEY);
  }

  @Override
  public Subtopics as(String alias) {
    return new Subtopics(DSL.name(alias), this);
  }

  @Override
  public Subtopics as(Name alias) {
    return new Subtopics(alias, this);
  }

  /** Rename this table */
  @Override
  public Subtopics rename(String name) {
    return new Subtopics(DSL.name(name), null);
  }

  /** Rename this table */
  @Override
  public Subtopics rename(Name name) {
    return new Subtopics(name, null);
  }

  // -------------------------------------------------------------------------
  // Row8 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row8<UUID, LocalDateTime, JSONB, String, JSONB, LocalDateTime, UUID, JSONB> fieldsRow() {
    return (Row8) super.fieldsRow();
  }
}
