/*
 * This file is generated by jOOQ.
 */
package de.digitalcollections.cudami.server.backend.impl.jooq.db.tables;

import de.digitalcollections.cudami.server.backend.impl.jooq.db.Indexes;
import de.digitalcollections.cudami.server.backend.impl.jooq.db.Keys;
import de.digitalcollections.cudami.server.backend.impl.jooq.db.Public;
import de.digitalcollections.cudami.server.backend.impl.jooq.db.tables.records.VersionsRecord;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Versions extends TableImpl<VersionsRecord> {

  private static final long serialVersionUID = -1475264572;

  /** The reference instance of <code>public.versions</code> */
  public static final Versions VERSIONS = new Versions();

  /** The class holding records for this type */
  @Override
  public Class<VersionsRecord> getRecordType() {
    return VersionsRecord.class;
  }

  /** The column <code>public.versions.uuid</code>. */
  public final TableField<VersionsRecord, UUID> UUID =
      createField(DSL.name("uuid"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

  /** The column <code>public.versions.version_value</code>. */
  public final TableField<VersionsRecord, Integer> VERSION_VALUE =
      createField(DSL.name("version_value"), org.jooq.impl.SQLDataType.INTEGER, this, "");

  /** The column <code>public.versions.description</code>. */
  public final TableField<VersionsRecord, String> DESCRIPTION =
      createField(DSL.name("description"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

  /** The column <code>public.versions.created</code>. */
  public final TableField<VersionsRecord, LocalDate> CREATED =
      createField(
          DSL.name("created"), org.jooq.impl.SQLDataType.LOCALDATE.nullable(false), this, "");

  /** The column <code>public.versions.type_key</code>. */
  public final TableField<VersionsRecord, String> TYPE_KEY =
      createField(DSL.name("type_key"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

  /** The column <code>public.versions.instance_key</code>. */
  public final TableField<VersionsRecord, String> INSTANCE_KEY =
      createField(DSL.name("instance_key"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

  /** The column <code>public.versions.instance_version_key</code>. */
  public final TableField<VersionsRecord, String> INSTANCE_VERSION_KEY =
      createField(DSL.name("instance_version_key"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

  /** The column <code>public.versions.status</code>. */
  public final TableField<VersionsRecord, String> STATUS =
      createField(DSL.name("status"), org.jooq.impl.SQLDataType.VARCHAR(16), this, "");

  /** Create a <code>public.versions</code> table reference */
  public Versions() {
    this(DSL.name("versions"), null);
  }

  /** Create an aliased <code>public.versions</code> table reference */
  public Versions(String alias) {
    this(DSL.name(alias), VERSIONS);
  }

  /** Create an aliased <code>public.versions</code> table reference */
  public Versions(Name alias) {
    this(alias, VERSIONS);
  }

  private Versions(Name alias, Table<VersionsRecord> aliased) {
    this(alias, aliased, null);
  }

  private Versions(Name alias, Table<VersionsRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  public <O extends Record> Versions(Table<O> child, ForeignKey<O, VersionsRecord> key) {
    super(child, key, VERSIONS);
  }

  @Override
  public Schema getSchema() {
    return Public.PUBLIC;
  }

  @Override
  public List<Index> getIndexes() {
    return Arrays.<Index>asList(
        Indexes.IDX_VERSIONS_INSTANCE_KEY, Indexes.IDX_VERSIONS_INSTANCE_VERSION_KEY);
  }

  @Override
  public UniqueKey<VersionsRecord> getPrimaryKey() {
    return Keys.VERSIONS_PKEY;
  }

  @Override
  public List<UniqueKey<VersionsRecord>> getKeys() {
    return Arrays.<UniqueKey<VersionsRecord>>asList(Keys.VERSIONS_PKEY);
  }

  @Override
  public Versions as(String alias) {
    return new Versions(DSL.name(alias), this);
  }

  @Override
  public Versions as(Name alias) {
    return new Versions(alias, this);
  }

  /** Rename this table */
  @Override
  public Versions rename(String name) {
    return new Versions(DSL.name(name), null);
  }

  /** Rename this table */
  @Override
  public Versions rename(Name name) {
    return new Versions(name, null);
  }

  // -------------------------------------------------------------------------
  // Row8 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row8<UUID, Integer, String, LocalDate, String, String, String, String> fieldsRow() {
    return (Row8) super.fieldsRow();
  }
}
