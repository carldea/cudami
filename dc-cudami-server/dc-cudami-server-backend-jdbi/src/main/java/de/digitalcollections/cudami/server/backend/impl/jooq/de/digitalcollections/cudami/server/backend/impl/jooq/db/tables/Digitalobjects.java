/*
 * This file is generated by jOOQ.
 */
package de.digitalcollections.cudami.server.backend.impl.jooq.db.tables;

import de.digitalcollections.cudami.server.backend.impl.jooq.db.Keys;
import de.digitalcollections.cudami.server.backend.impl.jooq.db.Public;
import de.digitalcollections.cudami.server.backend.impl.jooq.db.tables.records.DigitalobjectsRecord;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Digitalobjects extends TableImpl<DigitalobjectsRecord> {

  private static final long serialVersionUID = -238139005;

  /** The reference instance of <code>public.digitalobjects</code> */
  public static final Digitalobjects DIGITALOBJECTS = new Digitalobjects();

  /** The class holding records for this type */
  @Override
  public Class<DigitalobjectsRecord> getRecordType() {
    return DigitalobjectsRecord.class;
  }

  /** The column <code>public.digitalobjects.uuid</code>. */
  public final TableField<DigitalobjectsRecord, UUID> UUID =
      createField(DSL.name("uuid"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

  /** The column <code>public.digitalobjects.created</code>. */
  public final TableField<DigitalobjectsRecord, LocalDateTime> CREATED =
      createField(
          DSL.name("created"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

  /** The column <code>public.digitalobjects.description</code>. */
  public final TableField<DigitalobjectsRecord, JSONB> DESCRIPTION =
      createField(DSL.name("description"), org.jooq.impl.SQLDataType.JSONB, this, "");

  /** The column <code>public.digitalobjects.identifiable_type</code>. */
  public final TableField<DigitalobjectsRecord, String> IDENTIFIABLE_TYPE =
      createField(
          DSL.name("identifiable_type"),
          org.jooq.impl.SQLDataType.VARCHAR.nullable(false),
          this,
          "");

  /** The column <code>public.digitalobjects.label</code>. */
  public final TableField<DigitalobjectsRecord, JSONB> LABEL =
      createField(DSL.name("label"), org.jooq.impl.SQLDataType.JSONB.nullable(false), this, "");

  /** The column <code>public.digitalobjects.last_modified</code>. */
  public final TableField<DigitalobjectsRecord, LocalDateTime> LAST_MODIFIED =
      createField(
          DSL.name("last_modified"),
          org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false),
          this,
          "");

  /** The column <code>public.digitalobjects.entity_type</code>. */
  public final TableField<DigitalobjectsRecord, String> ENTITY_TYPE =
      createField(
          DSL.name("entity_type"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

  /** The column <code>public.digitalobjects.version</code>. */
  public final TableField<DigitalobjectsRecord, UUID> VERSION =
      createField(DSL.name("version"), org.jooq.impl.SQLDataType.UUID, this, "");

  /** The column <code>public.digitalobjects.refid</code>. */
  public final TableField<DigitalobjectsRecord, Integer> REFID =
      createField(
          DSL.name("refid"),
          org.jooq.impl.SQLDataType.INTEGER
              .nullable(false)
              .defaultValue(
                  org.jooq.impl.DSL.field(
                      "nextval('entities_refid_seq'::regclass)",
                      org.jooq.impl.SQLDataType.INTEGER)),
          this,
          "");

  /** The column <code>public.digitalobjects.previewfileresource</code>. */
  public final TableField<DigitalobjectsRecord, UUID> PREVIEWFILERESOURCE =
      createField(DSL.name("previewfileresource"), org.jooq.impl.SQLDataType.UUID, this, "");

  /** The column <code>public.digitalobjects.preview_hints</code>. */
  public final TableField<DigitalobjectsRecord, JSONB> PREVIEW_HINTS =
      createField(DSL.name("preview_hints"), org.jooq.impl.SQLDataType.JSONB, this, "");

  /** The column <code>public.digitalobjects.custom_attrs</code>. */
  public final TableField<DigitalobjectsRecord, JSONB> CUSTOM_ATTRS =
      createField(DSL.name("custom_attrs"), org.jooq.impl.SQLDataType.JSONB, this, "");

  /** Create a <code>public.digitalobjects</code> table reference */
  public Digitalobjects() {
    this(DSL.name("digitalobjects"), null);
  }

  /** Create an aliased <code>public.digitalobjects</code> table reference */
  public Digitalobjects(String alias) {
    this(DSL.name(alias), DIGITALOBJECTS);
  }

  /** Create an aliased <code>public.digitalobjects</code> table reference */
  public Digitalobjects(Name alias) {
    this(alias, DIGITALOBJECTS);
  }

  private Digitalobjects(Name alias, Table<DigitalobjectsRecord> aliased) {
    this(alias, aliased, null);
  }

  private Digitalobjects(Name alias, Table<DigitalobjectsRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  public <O extends Record> Digitalobjects(
      Table<O> child, ForeignKey<O, DigitalobjectsRecord> key) {
    super(child, key, DIGITALOBJECTS);
  }

  @Override
  public Schema getSchema() {
    return Public.PUBLIC;
  }

  @Override
  public Identity<DigitalobjectsRecord, Integer> getIdentity() {
    return Keys.IDENTITY_DIGITALOBJECTS;
  }

  @Override
  public UniqueKey<DigitalobjectsRecord> getPrimaryKey() {
    return Keys.NEW_DIGITALOBJECTS_PKEY;
  }

  @Override
  public List<UniqueKey<DigitalobjectsRecord>> getKeys() {
    return Arrays.<UniqueKey<DigitalobjectsRecord>>asList(Keys.NEW_DIGITALOBJECTS_PKEY);
  }

  @Override
  public Digitalobjects as(String alias) {
    return new Digitalobjects(DSL.name(alias), this);
  }

  @Override
  public Digitalobjects as(Name alias) {
    return new Digitalobjects(alias, this);
  }

  /** Rename this table */
  @Override
  public Digitalobjects rename(String name) {
    return new Digitalobjects(DSL.name(name), null);
  }

  /** Rename this table */
  @Override
  public Digitalobjects rename(Name name) {
    return new Digitalobjects(name, null);
  }

  // -------------------------------------------------------------------------
  // Row12 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row12<
          UUID,
          LocalDateTime,
          JSONB,
          String,
          JSONB,
          LocalDateTime,
          String,
          UUID,
          Integer,
          UUID,
          JSONB,
          JSONB>
      fieldsRow() {
    return (Row12) super.fieldsRow();
  }
}
