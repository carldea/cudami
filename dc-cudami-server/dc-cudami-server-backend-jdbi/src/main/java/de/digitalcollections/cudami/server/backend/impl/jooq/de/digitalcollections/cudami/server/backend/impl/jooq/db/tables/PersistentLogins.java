/*
 * This file is generated by jOOQ.
 */
package de.digitalcollections.cudami.server.backend.impl.jooq.db.tables;

import de.digitalcollections.cudami.server.backend.impl.jooq.db.Keys;
import de.digitalcollections.cudami.server.backend.impl.jooq.db.Public;
import de.digitalcollections.cudami.server.backend.impl.jooq.db.tables.records.PersistentLoginsRecord;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class PersistentLogins extends TableImpl<PersistentLoginsRecord> {

  private static final long serialVersionUID = 232426532;

  /** The reference instance of <code>public.persistent_logins</code> */
  public static final PersistentLogins PERSISTENT_LOGINS = new PersistentLogins();

  /** The class holding records for this type */
  @Override
  public Class<PersistentLoginsRecord> getRecordType() {
    return PersistentLoginsRecord.class;
  }

  /** The column <code>public.persistent_logins.username</code>. */
  public final TableField<PersistentLoginsRecord, String> USERNAME =
      createField(
          DSL.name("username"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

  /** The column <code>public.persistent_logins.series</code>. */
  public final TableField<PersistentLoginsRecord, String> SERIES =
      createField(DSL.name("series"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

  /** The column <code>public.persistent_logins.token</code>. */
  public final TableField<PersistentLoginsRecord, String> TOKEN =
      createField(DSL.name("token"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

  /** The column <code>public.persistent_logins.last_used</code>. */
  public final TableField<PersistentLoginsRecord, LocalDateTime> LAST_USED =
      createField(
          DSL.name("last_used"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

  /** Create a <code>public.persistent_logins</code> table reference */
  public PersistentLogins() {
    this(DSL.name("persistent_logins"), null);
  }

  /** Create an aliased <code>public.persistent_logins</code> table reference */
  public PersistentLogins(String alias) {
    this(DSL.name(alias), PERSISTENT_LOGINS);
  }

  /** Create an aliased <code>public.persistent_logins</code> table reference */
  public PersistentLogins(Name alias) {
    this(alias, PERSISTENT_LOGINS);
  }

  private PersistentLogins(Name alias, Table<PersistentLoginsRecord> aliased) {
    this(alias, aliased, null);
  }

  private PersistentLogins(
      Name alias, Table<PersistentLoginsRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  public <O extends Record> PersistentLogins(
      Table<O> child, ForeignKey<O, PersistentLoginsRecord> key) {
    super(child, key, PERSISTENT_LOGINS);
  }

  @Override
  public Schema getSchema() {
    return Public.PUBLIC;
  }

  @Override
  public UniqueKey<PersistentLoginsRecord> getPrimaryKey() {
    return Keys.PERSISTENT_LOGINS_PKEY;
  }

  @Override
  public List<UniqueKey<PersistentLoginsRecord>> getKeys() {
    return Arrays.<UniqueKey<PersistentLoginsRecord>>asList(Keys.PERSISTENT_LOGINS_PKEY);
  }

  @Override
  public PersistentLogins as(String alias) {
    return new PersistentLogins(DSL.name(alias), this);
  }

  @Override
  public PersistentLogins as(Name alias) {
    return new PersistentLogins(alias, this);
  }

  /** Rename this table */
  @Override
  public PersistentLogins rename(String name) {
    return new PersistentLogins(DSL.name(name), null);
  }

  /** Rename this table */
  @Override
  public PersistentLogins rename(Name name) {
    return new PersistentLogins(name, null);
  }

  // -------------------------------------------------------------------------
  // Row4 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row4<String, String, String, LocalDateTime> fieldsRow() {
    return (Row4) super.fieldsRow();
  }
}
