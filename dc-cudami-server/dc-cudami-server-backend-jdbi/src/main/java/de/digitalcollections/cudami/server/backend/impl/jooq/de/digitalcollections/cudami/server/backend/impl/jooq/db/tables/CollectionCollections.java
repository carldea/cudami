/*
 * This file is generated by jOOQ.
 */
package de.digitalcollections.cudami.server.backend.impl.jooq.db.tables;

import de.digitalcollections.cudami.server.backend.impl.jooq.db.Keys;
import de.digitalcollections.cudami.server.backend.impl.jooq.db.Public;
import de.digitalcollections.cudami.server.backend.impl.jooq.db.tables.records.CollectionCollectionsRecord;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class CollectionCollections extends TableImpl<CollectionCollectionsRecord> {

  private static final long serialVersionUID = 1952145434;

  /** The reference instance of <code>public.collection_collections</code> */
  public static final CollectionCollections COLLECTION_COLLECTIONS = new CollectionCollections();

  /** The class holding records for this type */
  @Override
  public Class<CollectionCollectionsRecord> getRecordType() {
    return CollectionCollectionsRecord.class;
  }

  /** The column <code>public.collection_collections.parent_collection_uuid</code>. */
  public final TableField<CollectionCollectionsRecord, UUID> PARENT_COLLECTION_UUID =
      createField(
          DSL.name("parent_collection_uuid"),
          org.jooq.impl.SQLDataType.UUID.nullable(false),
          this,
          "");

  /** The column <code>public.collection_collections.child_collection_uuid</code>. */
  public final TableField<CollectionCollectionsRecord, UUID> CHILD_COLLECTION_UUID =
      createField(
          DSL.name("child_collection_uuid"),
          org.jooq.impl.SQLDataType.UUID.nullable(false),
          this,
          "");

  /** The column <code>public.collection_collections.sortindex</code>. */
  public final TableField<CollectionCollectionsRecord, Short> SORTINDEX =
      createField(DSL.name("sortindex"), org.jooq.impl.SQLDataType.SMALLINT, this, "");

  /** Create a <code>public.collection_collections</code> table reference */
  public CollectionCollections() {
    this(DSL.name("collection_collections"), null);
  }

  /** Create an aliased <code>public.collection_collections</code> table reference */
  public CollectionCollections(String alias) {
    this(DSL.name(alias), COLLECTION_COLLECTIONS);
  }

  /** Create an aliased <code>public.collection_collections</code> table reference */
  public CollectionCollections(Name alias) {
    this(alias, COLLECTION_COLLECTIONS);
  }

  private CollectionCollections(Name alias, Table<CollectionCollectionsRecord> aliased) {
    this(alias, aliased, null);
  }

  private CollectionCollections(
      Name alias, Table<CollectionCollectionsRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  public <O extends Record> CollectionCollections(
      Table<O> child, ForeignKey<O, CollectionCollectionsRecord> key) {
    super(child, key, COLLECTION_COLLECTIONS);
  }

  @Override
  public Schema getSchema() {
    return Public.PUBLIC;
  }

  @Override
  public UniqueKey<CollectionCollectionsRecord> getPrimaryKey() {
    return Keys.COLLECTION_COLLECTIONS_PKEY;
  }

  @Override
  public List<UniqueKey<CollectionCollectionsRecord>> getKeys() {
    return Arrays.<UniqueKey<CollectionCollectionsRecord>>asList(Keys.COLLECTION_COLLECTIONS_PKEY);
  }

  @Override
  public List<ForeignKey<CollectionCollectionsRecord, ?>> getReferences() {
    return Arrays.<ForeignKey<CollectionCollectionsRecord, ?>>asList(
        Keys.COLLECTION_COLLECTIONS__COLLECTION_COLLECTIONS_PARENT_COLLECTION_UUID_FKEY,
        Keys.COLLECTION_COLLECTIONS__COLLECTION_COLLECTIONS_CHILD_COLLECTION_UUID_FKEY);
  }

  public Collections collectionCollectionsParentCollectionUuidFkey() {
    return new Collections(
        this, Keys.COLLECTION_COLLECTIONS__COLLECTION_COLLECTIONS_PARENT_COLLECTION_UUID_FKEY);
  }

  public Collections collectionCollectionsChildCollectionUuidFkey() {
    return new Collections(
        this, Keys.COLLECTION_COLLECTIONS__COLLECTION_COLLECTIONS_CHILD_COLLECTION_UUID_FKEY);
  }

  @Override
  public CollectionCollections as(String alias) {
    return new CollectionCollections(DSL.name(alias), this);
  }

  @Override
  public CollectionCollections as(Name alias) {
    return new CollectionCollections(alias, this);
  }

  /** Rename this table */
  @Override
  public CollectionCollections rename(String name) {
    return new CollectionCollections(DSL.name(name), null);
  }

  /** Rename this table */
  @Override
  public CollectionCollections rename(Name name) {
    return new CollectionCollections(name, null);
  }

  // -------------------------------------------------------------------------
  // Row3 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row3<UUID, UUID, Short> fieldsRow() {
    return (Row3) super.fieldsRow();
  }
}
