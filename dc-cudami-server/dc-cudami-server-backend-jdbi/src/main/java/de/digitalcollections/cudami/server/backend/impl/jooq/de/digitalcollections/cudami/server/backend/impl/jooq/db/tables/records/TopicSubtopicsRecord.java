/*
 * This file is generated by jOOQ.
 */
package de.digitalcollections.cudami.server.backend.impl.jooq.db.tables.records;

import de.digitalcollections.cudami.server.backend.impl.jooq.db.tables.TopicSubtopics;
import java.util.UUID;
import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class TopicSubtopicsRecord extends UpdatableRecordImpl<TopicSubtopicsRecord>
    implements Record3<UUID, UUID, Short> {

  private static final long serialVersionUID = 1853045055;

  /** Setter for <code>public.topic_subtopics.topic_uuid</code>. */
  public void setTopicUuid(UUID value) {
    set(0, value);
  }

  /** Getter for <code>public.topic_subtopics.topic_uuid</code>. */
  public UUID getTopicUuid() {
    return (UUID) get(0);
  }

  /** Setter for <code>public.topic_subtopics.subtopic_uuid</code>. */
  public void setSubtopicUuid(UUID value) {
    set(1, value);
  }

  /** Getter for <code>public.topic_subtopics.subtopic_uuid</code>. */
  public UUID getSubtopicUuid() {
    return (UUID) get(1);
  }

  /** Setter for <code>public.topic_subtopics.sortindex</code>. */
  public void setSortindex(Short value) {
    set(2, value);
  }

  /** Getter for <code>public.topic_subtopics.sortindex</code>. */
  public Short getSortindex() {
    return (Short) get(2);
  }

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------

  @Override
  public Record2<UUID, UUID> key() {
    return (Record2) super.key();
  }

  // -------------------------------------------------------------------------
  // Record3 type implementation
  // -------------------------------------------------------------------------

  @Override
  public Row3<UUID, UUID, Short> fieldsRow() {
    return (Row3) super.fieldsRow();
  }

  @Override
  public Row3<UUID, UUID, Short> valuesRow() {
    return (Row3) super.valuesRow();
  }

  @Override
  public Field<UUID> field1() {
    return TopicSubtopics.TOPIC_SUBTOPICS.TOPIC_UUID;
  }

  @Override
  public Field<UUID> field2() {
    return TopicSubtopics.TOPIC_SUBTOPICS.SUBTOPIC_UUID;
  }

  @Override
  public Field<Short> field3() {
    return TopicSubtopics.TOPIC_SUBTOPICS.SORTINDEX;
  }

  @Override
  public UUID component1() {
    return getTopicUuid();
  }

  @Override
  public UUID component2() {
    return getSubtopicUuid();
  }

  @Override
  public Short component3() {
    return getSortindex();
  }

  @Override
  public UUID value1() {
    return getTopicUuid();
  }

  @Override
  public UUID value2() {
    return getSubtopicUuid();
  }

  @Override
  public Short value3() {
    return getSortindex();
  }

  @Override
  public TopicSubtopicsRecord value1(UUID value) {
    setTopicUuid(value);
    return this;
  }

  @Override
  public TopicSubtopicsRecord value2(UUID value) {
    setSubtopicUuid(value);
    return this;
  }

  @Override
  public TopicSubtopicsRecord value3(Short value) {
    setSortindex(value);
    return this;
  }

  @Override
  public TopicSubtopicsRecord values(UUID value1, UUID value2, Short value3) {
    value1(value1);
    value2(value2);
    value3(value3);
    return this;
  }

  // -------------------------------------------------------------------------
  // Constructors
  // -------------------------------------------------------------------------

  /** Create a detached TopicSubtopicsRecord */
  public TopicSubtopicsRecord() {
    super(TopicSubtopics.TOPIC_SUBTOPICS);
  }

  /** Create a detached, initialised TopicSubtopicsRecord */
  public TopicSubtopicsRecord(UUID topicUuid, UUID subtopicUuid, Short sortindex) {
    super(TopicSubtopics.TOPIC_SUBTOPICS);

    set(0, topicUuid);
    set(1, subtopicUuid);
    set(2, sortindex);
  }
}
