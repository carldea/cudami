/*
 * This file is generated by jOOQ.
 */
package de.digitalcollections.cudami.server.backend.impl.jooq.db.tables;

import de.digitalcollections.cudami.server.backend.impl.jooq.db.Keys;
import de.digitalcollections.cudami.server.backend.impl.jooq.db.Public;
import de.digitalcollections.cudami.server.backend.impl.jooq.db.tables.records.ItemDigitalobjectsRecord;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class ItemDigitalobjects extends TableImpl<ItemDigitalobjectsRecord> {

  private static final long serialVersionUID = -1465847782;

  /** The reference instance of <code>public.item_digitalobjects</code> */
  public static final ItemDigitalobjects ITEM_DIGITALOBJECTS = new ItemDigitalobjects();

  /** The class holding records for this type */
  @Override
  public Class<ItemDigitalobjectsRecord> getRecordType() {
    return ItemDigitalobjectsRecord.class;
  }

  /** The column <code>public.item_digitalobjects.item_uuid</code>. */
  public final TableField<ItemDigitalobjectsRecord, UUID> ITEM_UUID =
      createField(DSL.name("item_uuid"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

  /** The column <code>public.item_digitalobjects.digitalobject_uuid</code>. */
  public final TableField<ItemDigitalobjectsRecord, UUID> DIGITALOBJECT_UUID =
      createField(
          DSL.name("digitalobject_uuid"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

  /** The column <code>public.item_digitalobjects.sortindex</code>. */
  public final TableField<ItemDigitalobjectsRecord, Short> SORTINDEX =
      createField(DSL.name("sortindex"), org.jooq.impl.SQLDataType.SMALLINT, this, "");

  /** Create a <code>public.item_digitalobjects</code> table reference */
  public ItemDigitalobjects() {
    this(DSL.name("item_digitalobjects"), null);
  }

  /** Create an aliased <code>public.item_digitalobjects</code> table reference */
  public ItemDigitalobjects(String alias) {
    this(DSL.name(alias), ITEM_DIGITALOBJECTS);
  }

  /** Create an aliased <code>public.item_digitalobjects</code> table reference */
  public ItemDigitalobjects(Name alias) {
    this(alias, ITEM_DIGITALOBJECTS);
  }

  private ItemDigitalobjects(Name alias, Table<ItemDigitalobjectsRecord> aliased) {
    this(alias, aliased, null);
  }

  private ItemDigitalobjects(
      Name alias, Table<ItemDigitalobjectsRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  public <O extends Record> ItemDigitalobjects(
      Table<O> child, ForeignKey<O, ItemDigitalobjectsRecord> key) {
    super(child, key, ITEM_DIGITALOBJECTS);
  }

  @Override
  public Schema getSchema() {
    return Public.PUBLIC;
  }

  @Override
  public UniqueKey<ItemDigitalobjectsRecord> getPrimaryKey() {
    return Keys.ITEM_DIGITALOBJECTS_PKEY;
  }

  @Override
  public List<UniqueKey<ItemDigitalobjectsRecord>> getKeys() {
    return Arrays.<UniqueKey<ItemDigitalobjectsRecord>>asList(Keys.ITEM_DIGITALOBJECTS_PKEY);
  }

  @Override
  public ItemDigitalobjects as(String alias) {
    return new ItemDigitalobjects(DSL.name(alias), this);
  }

  @Override
  public ItemDigitalobjects as(Name alias) {
    return new ItemDigitalobjects(alias, this);
  }

  /** Rename this table */
  @Override
  public ItemDigitalobjects rename(String name) {
    return new ItemDigitalobjects(DSL.name(name), null);
  }

  /** Rename this table */
  @Override
  public ItemDigitalobjects rename(Name name) {
    return new ItemDigitalobjects(name, null);
  }

  // -------------------------------------------------------------------------
  // Row3 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row3<UUID, UUID, Short> fieldsRow() {
    return (Row3) super.fieldsRow();
  }
}
