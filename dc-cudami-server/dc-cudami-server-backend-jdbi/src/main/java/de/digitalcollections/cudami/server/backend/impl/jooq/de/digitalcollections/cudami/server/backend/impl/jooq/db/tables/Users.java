/*
 * This file is generated by jOOQ.
 */
package de.digitalcollections.cudami.server.backend.impl.jooq.db.tables;

import de.digitalcollections.cudami.server.backend.impl.jooq.db.Keys;
import de.digitalcollections.cudami.server.backend.impl.jooq.db.Public;
import de.digitalcollections.cudami.server.backend.impl.jooq.db.tables.records.UsersRecord;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Users extends TableImpl<UsersRecord> {

  private static final long serialVersionUID = -1402523902;

  /** The reference instance of <code>public.users</code> */
  public static final Users USERS = new Users();

  /** The class holding records for this type */
  @Override
  public Class<UsersRecord> getRecordType() {
    return UsersRecord.class;
  }

  /** The column <code>public.users.id</code>. */
  public final TableField<UsersRecord, Integer> ID =
      createField(
          DSL.name("id"),
          org.jooq.impl.SQLDataType.INTEGER
              .nullable(false)
              .defaultValue(
                  org.jooq.impl.DSL.field(
                      "nextval('users_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)),
          this,
          "");

  /** The column <code>public.users.uuid</code>. */
  public final TableField<UsersRecord, UUID> UUID =
      createField(DSL.name("uuid"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

  /** The column <code>public.users.email</code>. */
  public final TableField<UsersRecord, String> EMAIL =
      createField(DSL.name("email"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

  /** The column <code>public.users.enabled</code>. */
  public final TableField<UsersRecord, Boolean> ENABLED =
      createField(
          DSL.name("enabled"),
          org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(
              org.jooq.impl.DSL.field("true", org.jooq.impl.SQLDataType.BOOLEAN)),
          this,
          "");

  /** The column <code>public.users.firstname</code>. */
  public final TableField<UsersRecord, String> FIRSTNAME =
      createField(DSL.name("firstname"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

  /** The column <code>public.users.lastname</code>. */
  public final TableField<UsersRecord, String> LASTNAME =
      createField(DSL.name("lastname"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

  /** The column <code>public.users.passwordhash</code>. */
  public final TableField<UsersRecord, String> PASSWORDHASH =
      createField(DSL.name("passwordhash"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

  /** The column <code>public.users.roles</code>. */
  public final TableField<UsersRecord, String[]> ROLES =
      createField(
          DSL.name("roles"), org.jooq.impl.SQLDataType.VARCHAR.getArrayDataType(), this, "");

  /** Create a <code>public.users</code> table reference */
  public Users() {
    this(DSL.name("users"), null);
  }

  /** Create an aliased <code>public.users</code> table reference */
  public Users(String alias) {
    this(DSL.name(alias), USERS);
  }

  /** Create an aliased <code>public.users</code> table reference */
  public Users(Name alias) {
    this(alias, USERS);
  }

  private Users(Name alias, Table<UsersRecord> aliased) {
    this(alias, aliased, null);
  }

  private Users(Name alias, Table<UsersRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  public <O extends Record> Users(Table<O> child, ForeignKey<O, UsersRecord> key) {
    super(child, key, USERS);
  }

  @Override
  public Schema getSchema() {
    return Public.PUBLIC;
  }

  @Override
  public Identity<UsersRecord, Integer> getIdentity() {
    return Keys.IDENTITY_USERS;
  }

  @Override
  public UniqueKey<UsersRecord> getPrimaryKey() {
    return Keys.USERS_PKEY;
  }

  @Override
  public List<UniqueKey<UsersRecord>> getKeys() {
    return Arrays.<UniqueKey<UsersRecord>>asList(
        Keys.USERS_PKEY, Keys.USERS_UUID_KEY, Keys.USERS_EMAIL_KEY);
  }

  @Override
  public Users as(String alias) {
    return new Users(DSL.name(alias), this);
  }

  @Override
  public Users as(Name alias) {
    return new Users(alias, this);
  }

  /** Rename this table */
  @Override
  public Users rename(String name) {
    return new Users(DSL.name(name), null);
  }

  /** Rename this table */
  @Override
  public Users rename(Name name) {
    return new Users(name, null);
  }

  // -------------------------------------------------------------------------
  // Row8 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row8<Integer, UUID, String, Boolean, String, String, String, String[]> fieldsRow() {
    return (Row8) super.fieldsRow();
  }
}
