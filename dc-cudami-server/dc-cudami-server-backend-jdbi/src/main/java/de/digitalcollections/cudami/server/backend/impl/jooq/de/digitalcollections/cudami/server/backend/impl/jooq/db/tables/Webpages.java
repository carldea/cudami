/*
 * This file is generated by jOOQ.
 */
package de.digitalcollections.cudami.server.backend.impl.jooq.db.tables;

import de.digitalcollections.cudami.server.backend.impl.jooq.db.Keys;
import de.digitalcollections.cudami.server.backend.impl.jooq.db.Public;
import de.digitalcollections.cudami.server.backend.impl.jooq.db.tables.records.WebpagesRecord;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Webpages extends TableImpl<WebpagesRecord> {

  private static final long serialVersionUID = -1518770620;

  /** The reference instance of <code>public.webpages</code> */
  public static final Webpages WEBPAGES = new Webpages();

  /** The class holding records for this type */
  @Override
  public Class<WebpagesRecord> getRecordType() {
    return WebpagesRecord.class;
  }

  /** The column <code>public.webpages.uuid</code>. */
  public final TableField<WebpagesRecord, UUID> UUID =
      createField(DSL.name("uuid"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

  /** The column <code>public.webpages.created</code>. */
  public final TableField<WebpagesRecord, LocalDateTime> CREATED =
      createField(
          DSL.name("created"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

  /** The column <code>public.webpages.description</code>. */
  public final TableField<WebpagesRecord, JSONB> DESCRIPTION =
      createField(DSL.name("description"), org.jooq.impl.SQLDataType.JSONB, this, "");

  /** The column <code>public.webpages.identifiable_type</code>. */
  public final TableField<WebpagesRecord, String> IDENTIFIABLE_TYPE =
      createField(
          DSL.name("identifiable_type"),
          org.jooq.impl.SQLDataType.VARCHAR.nullable(false),
          this,
          "");

  /** The column <code>public.webpages.label</code>. */
  public final TableField<WebpagesRecord, JSONB> LABEL =
      createField(DSL.name("label"), org.jooq.impl.SQLDataType.JSONB.nullable(false), this, "");

  /** The column <code>public.webpages.last_modified</code>. */
  public final TableField<WebpagesRecord, LocalDateTime> LAST_MODIFIED =
      createField(
          DSL.name("last_modified"),
          org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false),
          this,
          "");

  /** The column <code>public.webpages.text</code>. */
  public final TableField<WebpagesRecord, JSONB> TEXT =
      createField(DSL.name("text"), org.jooq.impl.SQLDataType.JSONB, this, "");

  /** The column <code>public.webpages.previewfileresource</code>. */
  public final TableField<WebpagesRecord, UUID> PREVIEWFILERESOURCE =
      createField(DSL.name("previewfileresource"), org.jooq.impl.SQLDataType.UUID, this, "");

  /** The column <code>public.webpages.publication_start</code>. */
  public final TableField<WebpagesRecord, LocalDate> PUBLICATION_START =
      createField(DSL.name("publication_start"), org.jooq.impl.SQLDataType.LOCALDATE, this, "");

  /** The column <code>public.webpages.publication_end</code>. */
  public final TableField<WebpagesRecord, LocalDate> PUBLICATION_END =
      createField(DSL.name("publication_end"), org.jooq.impl.SQLDataType.LOCALDATE, this, "");

  /** The column <code>public.webpages.preview_hints</code>. */
  public final TableField<WebpagesRecord, JSONB> PREVIEW_HINTS =
      createField(DSL.name("preview_hints"), org.jooq.impl.SQLDataType.JSONB, this, "");

  /** The column <code>public.webpages.rendering_hints</code>. */
  public final TableField<WebpagesRecord, JSONB> RENDERING_HINTS =
      createField(DSL.name("rendering_hints"), org.jooq.impl.SQLDataType.JSONB, this, "");

  /** Create a <code>public.webpages</code> table reference */
  public Webpages() {
    this(DSL.name("webpages"), null);
  }

  /** Create an aliased <code>public.webpages</code> table reference */
  public Webpages(String alias) {
    this(DSL.name(alias), WEBPAGES);
  }

  /** Create an aliased <code>public.webpages</code> table reference */
  public Webpages(Name alias) {
    this(alias, WEBPAGES);
  }

  private Webpages(Name alias, Table<WebpagesRecord> aliased) {
    this(alias, aliased, null);
  }

  private Webpages(Name alias, Table<WebpagesRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  public <O extends Record> Webpages(Table<O> child, ForeignKey<O, WebpagesRecord> key) {
    super(child, key, WEBPAGES);
  }

  @Override
  public Schema getSchema() {
    return Public.PUBLIC;
  }

  @Override
  public UniqueKey<WebpagesRecord> getPrimaryKey() {
    return Keys.NEW_WEBPAGES_PKEY;
  }

  @Override
  public List<UniqueKey<WebpagesRecord>> getKeys() {
    return Arrays.<UniqueKey<WebpagesRecord>>asList(Keys.NEW_WEBPAGES_PKEY);
  }

  @Override
  public Webpages as(String alias) {
    return new Webpages(DSL.name(alias), this);
  }

  @Override
  public Webpages as(Name alias) {
    return new Webpages(alias, this);
  }

  /** Rename this table */
  @Override
  public Webpages rename(String name) {
    return new Webpages(DSL.name(name), null);
  }

  /** Rename this table */
  @Override
  public Webpages rename(Name name) {
    return new Webpages(name, null);
  }

  // -------------------------------------------------------------------------
  // Row12 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row12<
          UUID,
          LocalDateTime,
          JSONB,
          String,
          JSONB,
          LocalDateTime,
          JSONB,
          UUID,
          LocalDate,
          LocalDate,
          JSONB,
          JSONB>
      fieldsRow() {
    return (Row12) super.fieldsRow();
  }
}
