/*
 * This file is generated by jOOQ.
 */
package de.digitalcollections.cudami.server.backend.impl.jooq.db.tables;

import de.digitalcollections.cudami.server.backend.impl.jooq.db.Keys;
import de.digitalcollections.cudami.server.backend.impl.jooq.db.Public;
import de.digitalcollections.cudami.server.backend.impl.jooq.db.tables.records.ProjectDigitalobjectsRecord;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class ProjectDigitalobjects extends TableImpl<ProjectDigitalobjectsRecord> {

  private static final long serialVersionUID = 1300831748;

  /** The reference instance of <code>public.project_digitalobjects</code> */
  public static final ProjectDigitalobjects PROJECT_DIGITALOBJECTS = new ProjectDigitalobjects();

  /** The class holding records for this type */
  @Override
  public Class<ProjectDigitalobjectsRecord> getRecordType() {
    return ProjectDigitalobjectsRecord.class;
  }

  /** The column <code>public.project_digitalobjects.project_uuid</code>. */
  public final TableField<ProjectDigitalobjectsRecord, UUID> PROJECT_UUID =
      createField(
          DSL.name("project_uuid"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

  /** The column <code>public.project_digitalobjects.digitalobject_uuid</code>. */
  public final TableField<ProjectDigitalobjectsRecord, UUID> DIGITALOBJECT_UUID =
      createField(
          DSL.name("digitalobject_uuid"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

  /** The column <code>public.project_digitalobjects.sortindex</code>. */
  public final TableField<ProjectDigitalobjectsRecord, Integer> SORTINDEX =
      createField(DSL.name("sortindex"), org.jooq.impl.SQLDataType.INTEGER, this, "");

  /** Create a <code>public.project_digitalobjects</code> table reference */
  public ProjectDigitalobjects() {
    this(DSL.name("project_digitalobjects"), null);
  }

  /** Create an aliased <code>public.project_digitalobjects</code> table reference */
  public ProjectDigitalobjects(String alias) {
    this(DSL.name(alias), PROJECT_DIGITALOBJECTS);
  }

  /** Create an aliased <code>public.project_digitalobjects</code> table reference */
  public ProjectDigitalobjects(Name alias) {
    this(alias, PROJECT_DIGITALOBJECTS);
  }

  private ProjectDigitalobjects(Name alias, Table<ProjectDigitalobjectsRecord> aliased) {
    this(alias, aliased, null);
  }

  private ProjectDigitalobjects(
      Name alias, Table<ProjectDigitalobjectsRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  public <O extends Record> ProjectDigitalobjects(
      Table<O> child, ForeignKey<O, ProjectDigitalobjectsRecord> key) {
    super(child, key, PROJECT_DIGITALOBJECTS);
  }

  @Override
  public Schema getSchema() {
    return Public.PUBLIC;
  }

  @Override
  public UniqueKey<ProjectDigitalobjectsRecord> getPrimaryKey() {
    return Keys.PROJECT_DIGITALOBJECTS_PKEY;
  }

  @Override
  public List<UniqueKey<ProjectDigitalobjectsRecord>> getKeys() {
    return Arrays.<UniqueKey<ProjectDigitalobjectsRecord>>asList(Keys.PROJECT_DIGITALOBJECTS_PKEY);
  }

  @Override
  public List<ForeignKey<ProjectDigitalobjectsRecord, ?>> getReferences() {
    return Arrays.<ForeignKey<ProjectDigitalobjectsRecord, ?>>asList(
        Keys.PROJECT_DIGITALOBJECTS__PROJECT_DIGITALOBJECTS_PROJECT_UUID_FKEY,
        Keys.PROJECT_DIGITALOBJECTS__PROJECT_DIGITALOBJECTS_DIGITALOBJECT_UUID_FKEY);
  }

  public Projects projects() {
    return new Projects(
        this, Keys.PROJECT_DIGITALOBJECTS__PROJECT_DIGITALOBJECTS_PROJECT_UUID_FKEY);
  }

  public Digitalobjects digitalobjects() {
    return new Digitalobjects(
        this, Keys.PROJECT_DIGITALOBJECTS__PROJECT_DIGITALOBJECTS_DIGITALOBJECT_UUID_FKEY);
  }

  @Override
  public ProjectDigitalobjects as(String alias) {
    return new ProjectDigitalobjects(DSL.name(alias), this);
  }

  @Override
  public ProjectDigitalobjects as(Name alias) {
    return new ProjectDigitalobjects(alias, this);
  }

  /** Rename this table */
  @Override
  public ProjectDigitalobjects rename(String name) {
    return new ProjectDigitalobjects(DSL.name(name), null);
  }

  /** Rename this table */
  @Override
  public ProjectDigitalobjects rename(Name name) {
    return new ProjectDigitalobjects(name, null);
  }

  // -------------------------------------------------------------------------
  // Row3 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row3<UUID, UUID, Integer> fieldsRow() {
    return (Row3) super.fieldsRow();
  }
}
