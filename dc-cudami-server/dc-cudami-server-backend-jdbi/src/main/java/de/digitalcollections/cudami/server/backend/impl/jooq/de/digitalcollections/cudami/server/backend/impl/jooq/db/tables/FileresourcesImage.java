/*
 * This file is generated by jOOQ.
 */
package de.digitalcollections.cudami.server.backend.impl.jooq.db.tables;

import de.digitalcollections.cudami.server.backend.impl.jooq.db.Keys;
import de.digitalcollections.cudami.server.backend.impl.jooq.db.Public;
import de.digitalcollections.cudami.server.backend.impl.jooq.db.tables.records.FileresourcesImageRecord;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row15;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class FileresourcesImage extends TableImpl<FileresourcesImageRecord> {

  private static final long serialVersionUID = -1529354737;

  /** The reference instance of <code>public.fileresources_image</code> */
  public static final FileresourcesImage FILERESOURCES_IMAGE = new FileresourcesImage();

  /** The class holding records for this type */
  @Override
  public Class<FileresourcesImageRecord> getRecordType() {
    return FileresourcesImageRecord.class;
  }

  /** The column <code>public.fileresources_image.uuid</code>. */
  public final TableField<FileresourcesImageRecord, UUID> UUID =
      createField(DSL.name("uuid"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

  /** The column <code>public.fileresources_image.created</code>. */
  public final TableField<FileresourcesImageRecord, LocalDateTime> CREATED =
      createField(
          DSL.name("created"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

  /** The column <code>public.fileresources_image.description</code>. */
  public final TableField<FileresourcesImageRecord, JSONB> DESCRIPTION =
      createField(DSL.name("description"), org.jooq.impl.SQLDataType.JSONB, this, "");

  /** The column <code>public.fileresources_image.identifiable_type</code>. */
  public final TableField<FileresourcesImageRecord, String> IDENTIFIABLE_TYPE =
      createField(
          DSL.name("identifiable_type"),
          org.jooq.impl.SQLDataType.VARCHAR.nullable(false),
          this,
          "");

  /** The column <code>public.fileresources_image.label</code>. */
  public final TableField<FileresourcesImageRecord, JSONB> LABEL =
      createField(DSL.name("label"), org.jooq.impl.SQLDataType.JSONB.nullable(false), this, "");

  /** The column <code>public.fileresources_image.last_modified</code>. */
  public final TableField<FileresourcesImageRecord, LocalDateTime> LAST_MODIFIED =
      createField(
          DSL.name("last_modified"),
          org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false),
          this,
          "");

  /** The column <code>public.fileresources_image.filename</code>. */
  public final TableField<FileresourcesImageRecord, String> FILENAME =
      createField(
          DSL.name("filename"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

  /** The column <code>public.fileresources_image.mimetype</code>. */
  public final TableField<FileresourcesImageRecord, String> MIMETYPE =
      createField(
          DSL.name("mimetype"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

  /** The column <code>public.fileresources_image.size_in_bytes</code>. */
  public final TableField<FileresourcesImageRecord, Long> SIZE_IN_BYTES =
      createField(
          DSL.name("size_in_bytes"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

  /** The column <code>public.fileresources_image.uri</code>. */
  public final TableField<FileresourcesImageRecord, String> URI =
      createField(DSL.name("uri"), org.jooq.impl.SQLDataType.CLOB, this, "");

  /** The column <code>public.fileresources_image.height</code>. */
  public final TableField<FileresourcesImageRecord, Integer> HEIGHT =
      createField(DSL.name("height"), org.jooq.impl.SQLDataType.INTEGER, this, "");

  /** The column <code>public.fileresources_image.width</code>. */
  public final TableField<FileresourcesImageRecord, Integer> WIDTH =
      createField(DSL.name("width"), org.jooq.impl.SQLDataType.INTEGER, this, "");

  /** The column <code>public.fileresources_image.previewfileresource</code>. */
  public final TableField<FileresourcesImageRecord, UUID> PREVIEWFILERESOURCE =
      createField(DSL.name("previewfileresource"), org.jooq.impl.SQLDataType.UUID, this, "");

  /** The column <code>public.fileresources_image.preview_hints</code>. */
  public final TableField<FileresourcesImageRecord, JSONB> PREVIEW_HINTS =
      createField(DSL.name("preview_hints"), org.jooq.impl.SQLDataType.JSONB, this, "");

  /** The column <code>public.fileresources_image.http_base_url</code>. */
  public final TableField<FileresourcesImageRecord, String> HTTP_BASE_URL =
      createField(DSL.name("http_base_url"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

  /** Create a <code>public.fileresources_image</code> table reference */
  public FileresourcesImage() {
    this(DSL.name("fileresources_image"), null);
  }

  /** Create an aliased <code>public.fileresources_image</code> table reference */
  public FileresourcesImage(String alias) {
    this(DSL.name(alias), FILERESOURCES_IMAGE);
  }

  /** Create an aliased <code>public.fileresources_image</code> table reference */
  public FileresourcesImage(Name alias) {
    this(alias, FILERESOURCES_IMAGE);
  }

  private FileresourcesImage(Name alias, Table<FileresourcesImageRecord> aliased) {
    this(alias, aliased, null);
  }

  private FileresourcesImage(
      Name alias, Table<FileresourcesImageRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  public <O extends Record> FileresourcesImage(
      Table<O> child, ForeignKey<O, FileresourcesImageRecord> key) {
    super(child, key, FILERESOURCES_IMAGE);
  }

  @Override
  public Schema getSchema() {
    return Public.PUBLIC;
  }

  @Override
  public UniqueKey<FileresourcesImageRecord> getPrimaryKey() {
    return Keys.NEW_FILERESOURCES_IMAGE_PKEY;
  }

  @Override
  public List<UniqueKey<FileresourcesImageRecord>> getKeys() {
    return Arrays.<UniqueKey<FileresourcesImageRecord>>asList(Keys.NEW_FILERESOURCES_IMAGE_PKEY);
  }

  @Override
  public FileresourcesImage as(String alias) {
    return new FileresourcesImage(DSL.name(alias), this);
  }

  @Override
  public FileresourcesImage as(Name alias) {
    return new FileresourcesImage(alias, this);
  }

  /** Rename this table */
  @Override
  public FileresourcesImage rename(String name) {
    return new FileresourcesImage(DSL.name(name), null);
  }

  /** Rename this table */
  @Override
  public FileresourcesImage rename(Name name) {
    return new FileresourcesImage(name, null);
  }

  // -------------------------------------------------------------------------
  // Row15 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row15<
          UUID,
          LocalDateTime,
          JSONB,
          String,
          JSONB,
          LocalDateTime,
          String,
          String,
          Long,
          String,
          Integer,
          Integer,
          UUID,
          JSONB,
          String>
      fieldsRow() {
    return (Row15) super.fieldsRow();
  }
}
