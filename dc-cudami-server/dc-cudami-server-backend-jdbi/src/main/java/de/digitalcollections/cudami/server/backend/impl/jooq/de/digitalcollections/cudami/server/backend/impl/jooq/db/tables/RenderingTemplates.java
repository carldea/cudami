/*
 * This file is generated by jOOQ.
 */
package de.digitalcollections.cudami.server.backend.impl.jooq.db.tables;

import de.digitalcollections.cudami.server.backend.impl.jooq.db.Keys;
import de.digitalcollections.cudami.server.backend.impl.jooq.db.Public;
import de.digitalcollections.cudami.server.backend.impl.jooq.db.tables.records.RenderingTemplatesRecord;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class RenderingTemplates extends TableImpl<RenderingTemplatesRecord> {

  private static final long serialVersionUID = -1848058142;

  /** The reference instance of <code>public.rendering_templates</code> */
  public static final RenderingTemplates RENDERING_TEMPLATES = new RenderingTemplates();

  /** The class holding records for this type */
  @Override
  public Class<RenderingTemplatesRecord> getRecordType() {
    return RenderingTemplatesRecord.class;
  }

  /** The column <code>public.rendering_templates.uuid</code>. */
  public final TableField<RenderingTemplatesRecord, UUID> UUID =
      createField(DSL.name("uuid"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

  /** The column <code>public.rendering_templates.description</code>. */
  public final TableField<RenderingTemplatesRecord, JSONB> DESCRIPTION =
      createField(DSL.name("description"), org.jooq.impl.SQLDataType.JSONB, this, "");

  /** The column <code>public.rendering_templates.label</code>. */
  public final TableField<RenderingTemplatesRecord, JSONB> LABEL =
      createField(DSL.name("label"), org.jooq.impl.SQLDataType.JSONB, this, "");

  /** The column <code>public.rendering_templates.name</code>. */
  public final TableField<RenderingTemplatesRecord, String> NAME =
      createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

  /** Create a <code>public.rendering_templates</code> table reference */
  public RenderingTemplates() {
    this(DSL.name("rendering_templates"), null);
  }

  /** Create an aliased <code>public.rendering_templates</code> table reference */
  public RenderingTemplates(String alias) {
    this(DSL.name(alias), RENDERING_TEMPLATES);
  }

  /** Create an aliased <code>public.rendering_templates</code> table reference */
  public RenderingTemplates(Name alias) {
    this(alias, RENDERING_TEMPLATES);
  }

  private RenderingTemplates(Name alias, Table<RenderingTemplatesRecord> aliased) {
    this(alias, aliased, null);
  }

  private RenderingTemplates(
      Name alias, Table<RenderingTemplatesRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  public <O extends Record> RenderingTemplates(
      Table<O> child, ForeignKey<O, RenderingTemplatesRecord> key) {
    super(child, key, RENDERING_TEMPLATES);
  }

  @Override
  public Schema getSchema() {
    return Public.PUBLIC;
  }

  @Override
  public UniqueKey<RenderingTemplatesRecord> getPrimaryKey() {
    return Keys.RENDERING_TEMPLATES_PKEY;
  }

  @Override
  public List<UniqueKey<RenderingTemplatesRecord>> getKeys() {
    return Arrays.<UniqueKey<RenderingTemplatesRecord>>asList(Keys.RENDERING_TEMPLATES_PKEY);
  }

  @Override
  public RenderingTemplates as(String alias) {
    return new RenderingTemplates(DSL.name(alias), this);
  }

  @Override
  public RenderingTemplates as(Name alias) {
    return new RenderingTemplates(alias, this);
  }

  /** Rename this table */
  @Override
  public RenderingTemplates rename(String name) {
    return new RenderingTemplates(DSL.name(name), null);
  }

  /** Rename this table */
  @Override
  public RenderingTemplates rename(Name name) {
    return new RenderingTemplates(name, null);
  }

  // -------------------------------------------------------------------------
  // Row4 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row4<UUID, JSONB, JSONB, String> fieldsRow() {
    return (Row4) super.fieldsRow();
  }
}
