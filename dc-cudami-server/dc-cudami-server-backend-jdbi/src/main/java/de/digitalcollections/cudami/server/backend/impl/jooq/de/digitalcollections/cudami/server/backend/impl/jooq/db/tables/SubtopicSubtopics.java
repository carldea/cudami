/*
 * This file is generated by jOOQ.
 */
package de.digitalcollections.cudami.server.backend.impl.jooq.db.tables;

import de.digitalcollections.cudami.server.backend.impl.jooq.db.Keys;
import de.digitalcollections.cudami.server.backend.impl.jooq.db.Public;
import de.digitalcollections.cudami.server.backend.impl.jooq.db.tables.records.SubtopicSubtopicsRecord;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class SubtopicSubtopics extends TableImpl<SubtopicSubtopicsRecord> {

  private static final long serialVersionUID = 1932014552;

  /** The reference instance of <code>public.subtopic_subtopics</code> */
  public static final SubtopicSubtopics SUBTOPIC_SUBTOPICS = new SubtopicSubtopics();

  /** The class holding records for this type */
  @Override
  public Class<SubtopicSubtopicsRecord> getRecordType() {
    return SubtopicSubtopicsRecord.class;
  }

  /** The column <code>public.subtopic_subtopics.parent_subtopic_uuid</code>. */
  public final TableField<SubtopicSubtopicsRecord, UUID> PARENT_SUBTOPIC_UUID =
      createField(
          DSL.name("parent_subtopic_uuid"),
          org.jooq.impl.SQLDataType.UUID.nullable(false),
          this,
          "");

  /** The column <code>public.subtopic_subtopics.child_subtopic_uuid</code>. */
  public final TableField<SubtopicSubtopicsRecord, UUID> CHILD_SUBTOPIC_UUID =
      createField(
          DSL.name("child_subtopic_uuid"),
          org.jooq.impl.SQLDataType.UUID.nullable(false),
          this,
          "");

  /** The column <code>public.subtopic_subtopics.sortindex</code>. */
  public final TableField<SubtopicSubtopicsRecord, Short> SORTINDEX =
      createField(DSL.name("sortindex"), org.jooq.impl.SQLDataType.SMALLINT, this, "");

  /** Create a <code>public.subtopic_subtopics</code> table reference */
  public SubtopicSubtopics() {
    this(DSL.name("subtopic_subtopics"), null);
  }

  /** Create an aliased <code>public.subtopic_subtopics</code> table reference */
  public SubtopicSubtopics(String alias) {
    this(DSL.name(alias), SUBTOPIC_SUBTOPICS);
  }

  /** Create an aliased <code>public.subtopic_subtopics</code> table reference */
  public SubtopicSubtopics(Name alias) {
    this(alias, SUBTOPIC_SUBTOPICS);
  }

  private SubtopicSubtopics(Name alias, Table<SubtopicSubtopicsRecord> aliased) {
    this(alias, aliased, null);
  }

  private SubtopicSubtopics(
      Name alias, Table<SubtopicSubtopicsRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  public <O extends Record> SubtopicSubtopics(
      Table<O> child, ForeignKey<O, SubtopicSubtopicsRecord> key) {
    super(child, key, SUBTOPIC_SUBTOPICS);
  }

  @Override
  public Schema getSchema() {
    return Public.PUBLIC;
  }

  @Override
  public UniqueKey<SubtopicSubtopicsRecord> getPrimaryKey() {
    return Keys.SUBTOPIC_SUBTOPICS_PKEY;
  }

  @Override
  public List<UniqueKey<SubtopicSubtopicsRecord>> getKeys() {
    return Arrays.<UniqueKey<SubtopicSubtopicsRecord>>asList(Keys.SUBTOPIC_SUBTOPICS_PKEY);
  }

  @Override
  public List<ForeignKey<SubtopicSubtopicsRecord, ?>> getReferences() {
    return Arrays.<ForeignKey<SubtopicSubtopicsRecord, ?>>asList(
        Keys.SUBTOPIC_SUBTOPICS__SUBTOPIC_SUBTOPICS_PARENT_SUBTOPIC_UUID_FKEY,
        Keys.SUBTOPIC_SUBTOPICS__SUBTOPIC_SUBTOPICS_CHILD_SUBTOPIC_UUID_FKEY);
  }

  public Subtopics subtopicSubtopicsParentSubtopicUuidFkey() {
    return new Subtopics(
        this, Keys.SUBTOPIC_SUBTOPICS__SUBTOPIC_SUBTOPICS_PARENT_SUBTOPIC_UUID_FKEY);
  }

  public Subtopics subtopicSubtopicsChildSubtopicUuidFkey() {
    return new Subtopics(
        this, Keys.SUBTOPIC_SUBTOPICS__SUBTOPIC_SUBTOPICS_CHILD_SUBTOPIC_UUID_FKEY);
  }

  @Override
  public SubtopicSubtopics as(String alias) {
    return new SubtopicSubtopics(DSL.name(alias), this);
  }

  @Override
  public SubtopicSubtopics as(Name alias) {
    return new SubtopicSubtopics(alias, this);
  }

  /** Rename this table */
  @Override
  public SubtopicSubtopics rename(String name) {
    return new SubtopicSubtopics(DSL.name(name), null);
  }

  /** Rename this table */
  @Override
  public SubtopicSubtopics rename(Name name) {
    return new SubtopicSubtopics(name, null);
  }

  // -------------------------------------------------------------------------
  // Row3 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row3<UUID, UUID, Short> fieldsRow() {
    return (Row3) super.fieldsRow();
  }
}
