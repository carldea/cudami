/*
 * This file is generated by jOOQ.
 */
package de.digitalcollections.cudami.server.backend.impl.jooq.db.tables;

import de.digitalcollections.cudami.server.backend.impl.jooq.db.Indexes;
import de.digitalcollections.cudami.server.backend.impl.jooq.db.Keys;
import de.digitalcollections.cudami.server.backend.impl.jooq.db.Public;
import de.digitalcollections.cudami.server.backend.impl.jooq.db.tables.records.IdentifiersRecord;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Identifiers extends TableImpl<IdentifiersRecord> {

  private static final long serialVersionUID = 437681668;

  /** The reference instance of <code>public.identifiers</code> */
  public static final Identifiers IDENTIFIERS = new Identifiers();

  /** The class holding records for this type */
  @Override
  public Class<IdentifiersRecord> getRecordType() {
    return IdentifiersRecord.class;
  }

  /** The column <code>public.identifiers.uuid</code>. */
  public final TableField<IdentifiersRecord, UUID> UUID =
      createField(DSL.name("uuid"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

  /** The column <code>public.identifiers.identifiable</code>. */
  public final TableField<IdentifiersRecord, UUID> IDENTIFIABLE =
      createField(
          DSL.name("identifiable"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

  /** The column <code>public.identifiers.namespace</code>. */
  public final TableField<IdentifiersRecord, String> NAMESPACE =
      createField(
          DSL.name("namespace"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

  /** The column <code>public.identifiers.identifier</code>. */
  public final TableField<IdentifiersRecord, String> IDENTIFIER =
      createField(
          DSL.name("identifier"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

  /** Create a <code>public.identifiers</code> table reference */
  public Identifiers() {
    this(DSL.name("identifiers"), null);
  }

  /** Create an aliased <code>public.identifiers</code> table reference */
  public Identifiers(String alias) {
    this(DSL.name(alias), IDENTIFIERS);
  }

  /** Create an aliased <code>public.identifiers</code> table reference */
  public Identifiers(Name alias) {
    this(alias, IDENTIFIERS);
  }

  private Identifiers(Name alias, Table<IdentifiersRecord> aliased) {
    this(alias, aliased, null);
  }

  private Identifiers(Name alias, Table<IdentifiersRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  public <O extends Record> Identifiers(Table<O> child, ForeignKey<O, IdentifiersRecord> key) {
    super(child, key, IDENTIFIERS);
  }

  @Override
  public Schema getSchema() {
    return Public.PUBLIC;
  }

  @Override
  public List<Index> getIndexes() {
    return Arrays.<Index>asList(Indexes.IDX_IDENTIFIERS_UNIQ);
  }

  @Override
  public UniqueKey<IdentifiersRecord> getPrimaryKey() {
    return Keys.IDENTIFIERS_PKEY;
  }

  @Override
  public List<UniqueKey<IdentifiersRecord>> getKeys() {
    return Arrays.<UniqueKey<IdentifiersRecord>>asList(
        Keys.IDENTIFIERS_PKEY, Keys.UNIQUE_NAMESPACE_IDENTIFIER);
  }

  @Override
  public Identifiers as(String alias) {
    return new Identifiers(DSL.name(alias), this);
  }

  @Override
  public Identifiers as(Name alias) {
    return new Identifiers(alias, this);
  }

  /** Rename this table */
  @Override
  public Identifiers rename(String name) {
    return new Identifiers(DSL.name(name), null);
  }

  /** Rename this table */
  @Override
  public Identifiers rename(Name name) {
    return new Identifiers(name, null);
  }

  // -------------------------------------------------------------------------
  // Row4 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row4<UUID, UUID, String, String> fieldsRow() {
    return (Row4) super.fieldsRow();
  }
}
