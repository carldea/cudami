/*
 * This file is generated by jOOQ.
 */
package de.digitalcollections.cudami.server.backend.impl.jooq.db.tables;

import de.digitalcollections.cudami.server.backend.impl.jooq.db.Keys;
import de.digitalcollections.cudami.server.backend.impl.jooq.db.Public;
import de.digitalcollections.cudami.server.backend.impl.jooq.db.tables.records.ArticleCreatorsRecord;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class ArticleCreators extends TableImpl<ArticleCreatorsRecord> {

  private static final long serialVersionUID = 1169031433;

  /** The reference instance of <code>public.article_creators</code> */
  public static final ArticleCreators ARTICLE_CREATORS = new ArticleCreators();

  /** The class holding records for this type */
  @Override
  public Class<ArticleCreatorsRecord> getRecordType() {
    return ArticleCreatorsRecord.class;
  }

  /** The column <code>public.article_creators.article_uuid</code>. */
  public final TableField<ArticleCreatorsRecord, UUID> ARTICLE_UUID =
      createField(
          DSL.name("article_uuid"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

  /** The column <code>public.article_creators.agent_uuid</code>. */
  public final TableField<ArticleCreatorsRecord, UUID> AGENT_UUID =
      createField(DSL.name("agent_uuid"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

  /** The column <code>public.article_creators.sortindex</code>. */
  public final TableField<ArticleCreatorsRecord, Short> SORTINDEX =
      createField(DSL.name("sortindex"), org.jooq.impl.SQLDataType.SMALLINT, this, "");

  /** Create a <code>public.article_creators</code> table reference */
  public ArticleCreators() {
    this(DSL.name("article_creators"), null);
  }

  /** Create an aliased <code>public.article_creators</code> table reference */
  public ArticleCreators(String alias) {
    this(DSL.name(alias), ARTICLE_CREATORS);
  }

  /** Create an aliased <code>public.article_creators</code> table reference */
  public ArticleCreators(Name alias) {
    this(alias, ARTICLE_CREATORS);
  }

  private ArticleCreators(Name alias, Table<ArticleCreatorsRecord> aliased) {
    this(alias, aliased, null);
  }

  private ArticleCreators(Name alias, Table<ArticleCreatorsRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  public <O extends Record> ArticleCreators(
      Table<O> child, ForeignKey<O, ArticleCreatorsRecord> key) {
    super(child, key, ARTICLE_CREATORS);
  }

  @Override
  public Schema getSchema() {
    return Public.PUBLIC;
  }

  @Override
  public UniqueKey<ArticleCreatorsRecord> getPrimaryKey() {
    return Keys.ARTICLE_CREATORS_PKEY;
  }

  @Override
  public List<UniqueKey<ArticleCreatorsRecord>> getKeys() {
    return Arrays.<UniqueKey<ArticleCreatorsRecord>>asList(Keys.ARTICLE_CREATORS_PKEY);
  }

  @Override
  public ArticleCreators as(String alias) {
    return new ArticleCreators(DSL.name(alias), this);
  }

  @Override
  public ArticleCreators as(Name alias) {
    return new ArticleCreators(alias, this);
  }

  /** Rename this table */
  @Override
  public ArticleCreators rename(String name) {
    return new ArticleCreators(DSL.name(name), null);
  }

  /** Rename this table */
  @Override
  public ArticleCreators rename(Name name) {
    return new ArticleCreators(name, null);
  }

  // -------------------------------------------------------------------------
  // Row3 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row3<UUID, UUID, Short> fieldsRow() {
    return (Row3) super.fieldsRow();
  }
}
